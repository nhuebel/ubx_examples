/*
 * hello microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */


/* block meta information */
char hello_meta[] =
        " { doc='A simple hello world block that outputs its configured number.',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t hello_config[] = {
		{ .name="number", .type_name = "int", .doc="number that the block will output to distinguish itself from other similar blocks" },
        { NULL },
};

/* declaration port block ports */
ubx_port_t hello_ports[] = {
        { NULL },
};

/* declare a struct port_cache */
struct hello_port_cache {
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct hello_port_cache *pc)
{
}


/* block operation forward declarations */
int hello_init(ubx_block_t *b);
int hello_start(ubx_block_t *b);
void hello_stop(ubx_block_t *b);
void hello_cleanup(ubx_block_t *b);
void hello_step(ubx_block_t *b);


/* put everything together */
ubx_block_t hello_block = {
        .name = "hello",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = hello_meta,
        .configs = hello_config,
        .ports = hello_ports,

        /* ops */
        .init = hello_init,
        .start = hello_start,
        .stop = hello_stop,
        .cleanup = hello_cleanup,
        .step = hello_step,
};


/* hello module init and cleanup functions */
int hello_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;

        if(ubx_block_register(ni, &hello_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void hello_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        ubx_block_unregister(ni, "hello");
}

