/*
 * random_walk_cblock microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

/* includes types and type metadata */
#include "../types/vector.h"
#include "../types/vector.h.hexarr"
#include "../types/distribution.h"
#include "../types/distribution.h.hexarr"

ubx_type_t types[] = {
        def_struct_type(struct vector, &vector_h),
        def_struct_type(struct distribution, &distribution_h),
        { NULL },
};

/* block meta information */
char random_walk_cblock_meta[] =
        " { doc='',"
        "   real-time=true,"
        "}";

/* declaration of block configuration */
ubx_config_t random_walk_cblock_config[] = {
        { .name="distribution", .type_name = "double", .doc="" },
        { NULL },
};

/* declaration port block ports */
ubx_port_t random_walk_cblock_ports[] = {
        { .name="change", .out_type_name="vector", .out_data_len=1, .doc="change of the value of the random walk"  },
        { NULL },
};

/* declare a struct port_cache */
struct random_walk_cblock_port_cache {
        ubx_port_t* change;
};

/* declare a helper function to update the port cache this is necessary
 * because the port ptrs can change if ports are dynamically added or
 * removed. This function should hence be called after all
 * initialization is done, i.e. typically in 'start'
 */
static void update_port_cache(ubx_block_t *b, struct random_walk_cblock_port_cache *pc)
{
        pc->change = ubx_port_get(b, "change");
}


/* for each port type, declare convenience functions to read/write from ports */
def_write_fun(write_change, vector)

/* block operation forward declarations */
int random_walk_cblock_init(ubx_block_t *b);
int random_walk_cblock_start(ubx_block_t *b);
void random_walk_cblock_stop(ubx_block_t *b);
void random_walk_cblock_cleanup(ubx_block_t *b);
void random_walk_cblock_step(ubx_block_t *b);


/* put everything together */
ubx_block_t random_walk_cblock_block = {
        .name = "random_walk_cblock",
        .type = BLOCK_TYPE_COMPUTATION,
        .meta_data = random_walk_cblock_meta,
        .configs = random_walk_cblock_config,
        .ports = random_walk_cblock_ports,

        /* ops */
        .init = random_walk_cblock_init,
        .start = random_walk_cblock_start,
        .stop = random_walk_cblock_stop,
        .cleanup = random_walk_cblock_cleanup,
        .step = random_walk_cblock_step,
};


/* random_walk_cblock module init and cleanup functions */
int random_walk_cblock_mod_init(ubx_node_info_t* ni)
{
        DBG(" ");
        int ret = -1;
        ubx_type_t *tptr;

        for(tptr=types; tptr->name!=NULL; tptr++) {
                if(ubx_type_register(ni, tptr) != 0) {
                        goto out;
                }
        }

        if(ubx_block_register(ni, &random_walk_cblock_block) != 0)
                goto out;

        ret=0;
out:
        return ret;
}

void random_walk_cblock_mod_cleanup(ubx_node_info_t *ni)
{
        DBG(" ");
        const ubx_type_t *tptr;

        for(tptr=types; tptr->name!=NULL; tptr++)
                ubx_type_unregister(ni, tptr->name);

        ubx_block_unregister(ni, "random_walk_cblock");
}

/* declare module init and cleanup functions, so that the ubx core can
 * find these when the module is loaded/unloaded */
UBX_MODULE_INIT(random_walk_cblock_mod_init)
UBX_MODULE_CLEANUP(random_walk_cblock_mod_cleanup)
